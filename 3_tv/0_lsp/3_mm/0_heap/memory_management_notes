-	brk(), 	-	brk will allocate memory from top of heap.
-	sbrk()	-	sbrk will point to top of heap.
-	malloc()   - allocating memory from heap
- 	mmap()	- allocating from mmap
-	malloc_stats() - prints the heap and mmap usage;
-	mallopt() - customize allocations sizes

-	minicore() - for debugging, the function minicore() check is memory physically mapped or not;

-	mlock()
-	munlock()

-	posix_memalign() - used to get aligned memory, with choice of your alignment size, and total size;



    stack
    	|
    memory maping segment
    	|
    heap
    	|
    bss(unitialized global and static)
    	|
    ds(initialized global and static)
    	|
    text (cs)


-	small block(<132K) are alloted from heap
- 	large blocks(>132K) are alloted from mmap 

-  Disadvantage of heap
	-	heap once expanded will not shrink;

-Advantahe of mmap() allocation :
	-	mmap() memory allocations help to release memory back to system but malloc() is not
	
	
-	Getting pagesize in user space :	
	-	size_t page_size;
	-	page_size = getpagesize();
	-	print("print_size"); 
	
	
-	https://github.com/lattera/glibc/blob/master/malloc/malloc.c


- Alignment : 

   start address / page size then it is called aligned
   
   8 bit aligned means start address /8
   32 bit aligned means start address /32
   
   cpu are designed to work with aligned buffer.
   
   structure padding is done , so that it is good for CPU for reading aligned buffers.
   
   #include <stdlib.h>
	int posix_memalign (void **memptr,
						size_t alignment,
						size_t size);
						
-	Allocating aligned memory ti buf with posix_memalign()
  					
  	char *buf;
	int ret;
	
	/* allocate 1 KB along a 256-byte(alignment) boundary */
	ret = posix_memalign (&buf, 256, 1024);
	if (ret) {
		fprintf (stderr, "posix_memalign: %s\n",
		strerror (ret));
		return −1;
	}
	
	/* use 'buf'... */
	free (buf);
	
	
 -	The Process Address Space :
 	-	Processes do not directly address physical memory. Instead, the kernel associates each
		process with a unique virtual address space.	
		
 -	Pages and Paging
 	-	Memory is composed of bits, of which (usually) eight make a byte. Bytes compose words,
		which in turn compose pages.
		
	-	For the purposes of memory management, the page is
		the most important of these: it is the smallest addressable unit of memory that the
		memory management unit (MMU) can manage.
    
    -	Thus the virtual address space is carved up into pages.
    
    -	The machine architecture determines the page size. Typical sizes include
		4 KB for 32-bit systems and 8 KB for 64-bit systems.
		
	-	A valid page is associated with an actual page of data, either in physical
		memory (RAM) or on secondary storage, such as a swap partition or file on disk.
		
	- PAGE FAULT, (paging in, paging out)
		-	If a valid page is associated with data on secondary storage, a process cannot access that
			page until the data is brought into physical memory.When a process attempts to access
			such a page, the memory management unit generates a page fault.
			
		-	The kernel then intervenes, transparently 'paging in' the data from secondary storage to physical memory.
   
   		-	Because there is considerably more virtual memory than physical memory, the kernel
			may have to move data out of memory to make room for the data 'paging in'. 
			
		-	'Paging out' is the process of moving data from physical memory to secondary storage. To min‐
			imize subsequent page ins, the kernel attempts to page out the data that is the least likely
			to be used in the near future.
			
	- copy-on-write COW
		-	Multiple pages of virtual memory, even in different virtual address spaces owned by
			different processes, may map to a single physical page.
			
		-	This allows different virtual address spaces to share the data in physical memory.
		
		-	The shared data may be read-only, writable, or both readable and writable.
		
		-	When a process writes to a shared writable page, one of two things can happen. 
			-	1.The simplest is that the kernel allows the write to occur, in which case all processes sharing the page
				  can see the results of the write operation. Usually, allowing multiple processes to read
				  from or write to a shared page requires some level of coordination and synchronization among the processes, 
				  but at the kernel level the write “just works” and all processes sharing the data instantly see the modifications.
				  
		    -	2. Alternatively, the MMU can intercept the write operation and raise an exception; the
					kernel, in response, will transparently create a new copy of the page for the writing
					process, and allow the write to continue against the new page. We call this approach
					copy-on-write (COW).
					Effectively, processes are allowed read access to shared data,
					which saves space. But when a process wants to write to a shared page, it receives a
					unique copy of that page on the fly, thereby allowing the kernel to act as if the process
					always had its own private copy. As copy-on-write occurs on a page-by-page basis, with
					this technique a huge file may be efficiently shared among many processes, and the
					individual processes will receive unique physical pages only for those pages to which
					they themselves write.
					   
					   
	 - OOM : OUT OF MEMORY
	 		- oom killer
	 		- when memory is full in RAM, OOM killer kills one task to get free memory.
	 		- one task is sacrified for the sake of overall system health;
   
   
